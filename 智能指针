template<typename T>
class SmartPointer{
private:
  T* _ptr;
  int _count;
public:
  SmartPointer(T* ptr=nullptr):_ptr(ptr){
    if(_ptr) _count=1;
    else _count=0;
  }
  
  SmartPointer(const SmartPointer& ptr){
    if(this!=&ptr){
      this._ptr=ptr._ptr;
      this._count=ptr._count;
      this._count++;
    }
  }
  
  SmartPointer& operater=(const SmartPointer& ptr){
    if(this._ptr==ptr._ptr) return *this;
    if(this._ptr){
      this._count--;
      if(this._count==0){
        delete this._ptr;
        delete this._count;
      }  
    }
    this._ptr=ptr._ptr;
    this._count=ptr._count;
    this._count++;
    return *this;
  }
  
  ~SmartPointer(){
    this._count--;
    if(this._count==0){
      delete this._ptr;
      delete this._count;
    }
  }
  
  int getCount(){
    return this._count;
  }
};
